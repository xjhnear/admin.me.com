<?php

namespace backend\models;

use Yii;

/**
 * This is the model base class for the table "notification".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Notification".
 *
 * Columns in table "notification" available as properties of the model,
 * followed by relations of table "notification" available as properties of the model.
 *
 * @property string $id
 * @property integer $user_id
 * @property string $channel
 * @property integer $is_push
 * @property string $msg_type
 * @property string $status
 * @property string $module
 * @property string $submod
 * @property integer $from_user
 * @property integer $objectId
 * @property string $title
 * @property string $alert
 * @property string $url
 * @property string $created
 * @property string $updated
 *
 * @property mixed $user
 */
abstract class BaseNotification extends \yii\db\ActiveRecord {
	public $totals; //the total summary array
	public $total_fields=array('');
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public static function tableName() {
		return '{{%notification}}';
	}

	/**
	 * @return \yii\db\Connection the database connection used by this AR class.
	 */
	public static function getDb()
	{
		return Yii::$app->get('apiDb');
	}
	
	public static function label($n = 1) {
		return Yii::t('app', 'Notification', $n);
	}

	public static function representingColumn() {
		return 'status';
	}

	public function rules() {
		return array(
			array('alert', 'required'),
			array('user_id, is_push, from_user, objectId', 'numerical', 'integerOnly'=>true),
			array('channel', 'length', 'max'=>11),
			array('msg_type', 'length', 'max'=>8),
			array('status, module', 'length', 'max'=>7),
			array('submod', 'length', 'max'=>20),
			array('title', 'length', 'max'=>100),
			array('alert', 'length', 'max'=>255),
			array('url', 'length', 'max'=>200),
			array('created, updated', 'safe'),
			array('user_id, channel, is_push, msg_type, status, module, submod, from_user, objectId, title, url, created', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, user_id, channel, is_push, msg_type, status, module, submod, from_user, objectId, title, alert, url, created, updated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => Yii::t('app', 'User'),
			'channel' => Yii::t('app', 'Channel'),
			'is_push' => Yii::t('app', 'Is Push'),
			'msg_type' => Yii::t('app', 'Msg Type'),
			'status' => Yii::t('app', 'Status'),
			'module' => Yii::t('app', 'Module'),
			'submod' => Yii::t('app', 'Submod'),
			'from_user' => Yii::t('app', 'From User'),
			'objectId' => Yii::t('app', 'Object'),
			'title' => Yii::t('app', 'Title'),
			'alert' => Yii::t('app', 'Alert'),
			'url' => Yii::t('app', 'Url'),
			'created' => Yii::t('app', 'Created'),
			'updated' => Yii::t('app', 'Updated'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('channel', $this->channel, true);
		$criteria->compare('is_push', $this->is_push);
		$criteria->compare('msg_type', $this->msg_type, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('module', $this->module, true);
		$criteria->compare('submod', $this->submod, true);
		$criteria->compare('from_user', $this->from_user);
		$criteria->compare('objectId', $this->objectId);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('alert', $this->alert, true);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('updated', $this->updated, true);

	
		$criteria->with=array('user');
		$criteria->together = true;
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'sort'=>array('defaultOrder'=>'t0_c0 desc')
		));
		
		
	}
	public function getSearchCriteria() {
		$criteria = new CDbCriteria;
		$criteria->compare('id', $this->id, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('channel', $this->channel, true);
		$criteria->compare('is_push', $this->is_push);
		$criteria->compare('msg_type', $this->msg_type, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('module', $this->module, true);
		$criteria->compare('submod', $this->submod, true);
		$criteria->compare('from_user', $this->from_user);
		$criteria->compare('objectId', $this->objectId);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('alert', $this->alert, true);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('updated', $this->updated, true);
	
		$criteria->with=array('user');
		$criteria->together = true;
		
		return $criteria;
	}
	
}
